<project name="orangefood-servletengine-servlets" basedir="." default="all">
	<!-- debugging off by default -->
	<property name="debug" value="false"/>
	
	<!-- load the build configuration properties -->
	<property name="configuration" value="${basedir}/configure.properties"/>
	<property file="${configuration}"/>
	
	<!-- set the source directories -->
	<property name="src" value="${basedir}/src"/>
	<property name="config" value="${basedir}/config/"/>
		
	<!-- set the build directories -->
	<property name="release" value="${basedir}/release/"/>
	<property name="build" value="${release}/build"/>
	<property name="classes" value="${build}/classes"/>

	<!-- The servlet library -->
	<property name="server_dir" value="${basedir}/../server"/>
	<property name="servlet_lib" value="${server_dir}/lib/servlet-2.3.jar"/>

	<!-- The default build, makes everything -->
	<target name="all" depends="init,jar" />

	<!-- Build with debugging on -->
	<target name="debug" depends="init">
		<antcall target="all">
			<param name="debug" value="true"/>
		</antcall>
	</target>

	<!-- Initilization target, adds tasks, sets time stamp and creates dir struct -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		
		<!-- Create the build directory structure -->
		<mkdir dir="${release}"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${classes}"/>

		<!-- Check if the web.xml needs to be updated -->
		<condition property="config_file.uptodate">
			<or>
				<uptodate srcfile="${config}/file-servlet.xml" targetfile="${classes}/config/web.xml"/>
				<uptodate srcfile="${config}/file-mapping.xml" targetfile="${classes}/config/web.xml"/>
			</or>
		</condition>
		<condition property="config_index.uptodate">
			<or>
				<uptodate srcfile="${config}/index-servlet.xml" targetfile="${classes}/config/web.xml"/>
				<uptodate srcfile="${config}/index-mapping.xml" targetfile="${classes}/config/web.xml"/>
			</or>
		</condition>
		<condition property="web.xml.uptodate">
			<and>
				<isset property="config_file.uptodate"/>
				<isset property="config_index.uptodate"/>
			</and>
		</condition>
		<!-- Set the location of the web.xml file -->
		<available property="web.xml.file" value="${basedir}/../release/build/classes/config/web.xml" file="${basedir}/../release/build/classes/config/web.xml" />
		<condition property="web.xml.file" value="${basedir}/../server/config/web.xml">
			<not><isset property="web.xml.file"/></not>
		</condition>
	</target>

<!--
 !
 !  Compile Targets
 !
 -->

	<!-- Copies non-CVS/non-.java to the dest dir -->	
	<target name="compile" depends="init,config,compile_file,compile_index">
		<!-- Copy any other non-cvs non-java fils to ${classes} -->
		<copy todir="${classes}" includeEmptyDirs="flase">
			<fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile_file" if="build_file" depends="init">
		<javac includeantruntime="false" srcdir="${src}" includes="**/file/*" destdir="${classes}" debug="${debug}" classpath="${servlet_lib}:${server_dir}/release/build/classes/" optimize="true"/>
	</target>
	
	<target name="compile_index" if="build_index" depends="init">
		<javac includeantruntime="false" srcdir="${src}" includes="**/index/*" destdir="${classes}" debug="${debug}" classpath="${servlet_lib}:${server_dir}/release/build/classes/" optimize="true"/>
	</target>
	

<!--
 !
 !  Config Targets
 !
 -->	
	<!-- copy the config directory over -->
	<target name="config" depends="init,web.xml,config_file,config_index">
	</target>
	
	<target name="web.xml" depends="init" unless="web.xml.uptodate">
		<!-- copy the web.xml file -->
		<copy file="${web.xml.file}" todir="${classes}/config"/>
	</target>
		
	<target name="config_file" depends="init" if="build_file" unless="config_file.uptodate">
		<xslt style="${config}/web.xsl" in="${classes}/config/web.xml" out="${classes}/config/web.out">
			<param name="servlet" expression="${config}/file-servlet.xml"/>
			<param name="servletmapping" expression="${config}/file-mapping.xml"/>			
		</xslt>
		<move file="${classes}/config/web.out" tofile="${classes}/config/web.xml"/>
	</target>	

	<target name="config_index" depends="init" if="build_index" unless="config_index.uptodate">
		<xslt style="${config}/web.xsl" in="${classes}/config/web.xml" out="${classes}/config/web.out">
			<param name="servlet" expression="${config}/index-servlet.xml"/>
			<param name="servletmapping" expression="${config}/index-mapping.xml"/>			
		</xslt>
		<move file="${classes}/config/web.out" tofile="${classes}/config/web.xml"/>
	</target>	
	
	<!-- Jars .class + other files -->
	<target name="jar" depends="init,compile">
		<jar jarfile="${release}/${ant.project.name}.jar" basedir="${classes}" />
	</target>

<!--
 !
 !  Clean Targets
 !
 -->	
	<!-- Clears up after the build -->
	<target name="clean">
		<!-- Delete the ${release} -->
		<delete dir="${release}"/>
	</target>
	
<!--
 !
 !  Build Configuration Targets
 !
 -->	
	
	<!-- Configures the build -->
	<target name="configure">
  		  <delete file="${configuration}"/>
		  <touch file="${configuration}"/>
  		  <antcall target="query_file"/>
  		  <antcall target="query_index"/>
	</target>

	<target name="query_file">
		  <input
    	   message="Build file servlet?"
		   validargs="yes,no"
		   addproperty="build_file_response"
  		  />
  		  <condition property="write_build_file">
	  		  <istrue value="${build_file_response}"/>
  		  </condition>
  		  <antcall target="write_build_file"/>
	</target>
	<target name="write_build_file" if="write_build_file">
		<echo file="${configuration}" append="true">build_file
</echo>
	</target>

	<target name="query_index">
		  <input
    	   message="Build index servlet?"
		   validargs="yes,no"
		   addproperty="build_index_response"
  		  />
  		  <condition property="write_build_index">
	  		  <istrue value="${build_index_response}"/>
  		  </condition>
  		  <antcall target="write_build_index"/>
	</target>
	<target name="write_build_index" if="write_build_index">
		<echo file="${configuration}" append="true">build_index
</echo>
	</target>

</project>
